cmake_minimum_required(VERSION 3.10)
project(cstuff VERSION 0.1)

if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")
  set(cstuff_source_dir "${CMAKE_CURRENT_SOURCE_DIR}")
else()
  set(cstuff_source_dir "${CMAKE_CURRENT_SOURCE_DIR}" PARENT_SCOPE)
endif()

function(add_cstuff)
  set(options basedb itoa mmapfile pat aton become record)
  cmake_parse_arguments(PARSE_ARGV 0 want "${options}" "" "")

  file(WRITE "${CMAKE_BINARY_DIR}/cmakesucks.c" "")
  if(TARGET cstuff)
  else()
	add_library(cstuff "${CMAKE_BINARY_DIR}/cmakesucks.c")
    target_include_directories(cstuff PUBLIC "${cstuff_source_dir}")
  endif()

  function(sourcederp)
	set(sources)
	foreach(arg IN LISTS ARGV)
	  get_filename_component(aarg "${arg}" ABSOLUTE BASE_DIR
		"${cstuff_source_dir}")
	  list(APPEND sources ${aarg})
	endforeach()
	target_sources(cstuff PUBLIC ${sources})
  endfunction()

  if(want_become)
	sourcederp(become.c)
  endif()
  if(want_record)
	sourcederp(record.c)
  endif()
  
  if(want_basedb)
	set(want_mmapfile 1)
	set(want_itoa 1)
	sourcederp(db/base.c mmapfile.c record.c)
	include(FindPkgConfig)
	pkg_check_modules(SQLITE
	  REQUIRED IMPORTED_TARGET
	  sqlite3)
	target_link_libraries(cstuff PUBLIC PkgConfig::SQLITE)
  endif(want_basedb)
  if(want_itoa)
	sourcederp(itoa.c)
  endif(want_itoa)
  if(want_aton)
	sourcederp(aton.c)
  endif(want_aton)  
  if(want_mmapfile)
	include(CheckSymbolExists)
	check_symbol_exists(mmap "sys/mman.h" HAVE_MMAP)
	if(HAVE_MMAP)
	  sourcederp(mmapfile.c)
	else(HAVE_MMAP)
	  message(FATAL_ERROR "We don't seem to have mmap")
	endif(HAVE_MMAP)
  endif(want_mmapfile)
  if(want_pat)
	include(CheckLibraryExists)
	check_library_exists(pcre pcre_jit_exec /usr/lib HAVE_PCRE)
	if(HAVE_PCRE)
	  sourcederp(pat.c)
	  target_link_libraries(cstuff PUBLIC pcre)
	else(HAVE_PCRE)
	  message(FATAL_ERROR "Couldn't find the PCRE library")
	endif(HAVE_PCRE)
	# for g_slice_etc... should we just use malloc?
	include(FindPkgConfig)
	pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
	target_link_libraries(cstuff PUBLIC PkgConfig::GLIB)
  endif(want_pat)
  if(want_path)
	include(FindPkgConfig)
	pkg_check_modules(GLIB
	  REQUIRED IMPORTED_TARGET
	  glib-2.0)
	sourcederp(path.c)
	target_link_libraries(cstuff PUBLIC PkgConfig::GLIB)
  endif(want_path)
endfunction(add_cstuff)

if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")
  enable_testing()
  function (my_tests)
	foreach(name IN LISTS ARGV)
	  add_cstuff(${name})
	  add_executable(test_${name}
		test/test_${name}.c)
	  target_link_libraries(test_${name} PRIVATE cstuff)
	  add_test(${name} test_${name})
	endforeach(name)
  endfunction(my_test)
  my_tests(record
	basedb
	aton
	itoa)
endif()
